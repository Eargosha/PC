__author__ = "Eargosha"

PI = 3.141592653589793

__author__ = "Eargosha"

PI = 3.141592653589793

"""Вычисление факториала числа n"""
def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
        yield result


"""
Ряд Тейлора - способ представления функции в виде бесконесчной суммы членов,
которые вычисляются на основе производных функции в определенной точке(например в x=0)
Для вычисления синуса и косинуса можно использовать разложение этого ряда

Ряд Тейлора для синуса:
sin(x) = x - x^3/3! + x^5/5! - x^7/7! + ...
Ряд Тейлора для косинуса:
cos(x) = 1 - x^2/2! + x^4/4! - x^6/6! + ...
ГДЕ: x - угол в радианах

Вычисление значений синуса и косинуса можно производить с определенной точностью, например в 20 итераций
"""

"""Вычисление синуса с рядом Тейлора, по умолчанию считается с точностью в 20 итераций ряда Тейлора
x - угол в радианах, для которого вычисляется синус
terms - количество члепнов ряда Тейлора, ктоторые будут использованы для вычисления (по умолчанию 20)
"""
def calculate_sin(x, terms=20):
    # Храним результат
    sin_x = 0
    # Перебираем все ряды Тейлора по заданую итерацию
    for i in range(terms):
        # Вычисляется числитель, где "(-1) ** i" - меняет знак!!!
        numerator = (-1) ** i * x ** (2 * i + 1)
        # Вычислятеся знаменатель
        denominator = factorial(2 * i + 1)
        # Складываем ряд
        sin_x += numerator / denominator

    return sin_x

"""Вычисление косинуса с рядом Тейлора, по умолчанию считается с точностью в 20 итераций ряда Тейлора
x - угол в радианах, для которого вычисляется синус
terms - количество члепнов ряда Тейлора, ктоторые будут использованы для вычисления (по умолчанию 20)
"""
def calculate_cos(x, terms=20):
    # Храним результат
    cos_x = 0
    # Перебираем все ряды Тейлора по заданую итерацию
    for i in range(terms):
        # Вычисляется числитель, где "(-1) ** i" - меняет знак!!!
        numerator = (-1) ** i * x ** (2 * i)
        # Вычислятеся знаменатель
        denominator = factorial(2 * i)
        # Складываем ряд
        cos_x += numerator / denominator

    return cos_x

"""
    Возвращает модуль (абсолютное значение) числа.

    :param value: Входное число (может быть int или float).
    :return: Модуль числа.
    :raises TypeError: Если входной параметр не является числом.
"""
def calculate_abs(value):
    if not isinstance(value, (int, float)):
        raise TypeError("Аргумент должен быть числом (int или float).")

    return value if value >= 0 else -value

"""
Ряд Тейлора - способ представления функции в виде бесконесчной суммы членов,
которые вычисляются на основе производных функции в определенной точке(например в x=0)
Для вычисления синуса и косинуса можно использовать разложение этого ряда

Ряд Тейлора для синуса:
sin(x) = x - x^3/3! + x^5/5! - x^7/7! + ...
Ряд Тейлора для косинуса:
cos(x) = 1 - x^2/2! + x^4/4! - x^6/6! + ...
ГДЕ: x - угол в радианах

Вычисление значений синуса и косинуса можно производить с определенной точностью, например в 20 итераций
"""

"""Вычисление синуса с рядом Тейлора, по умолчанию считается с точностью в 20 итераций ряда Тейлора
x - угол в радианах, для которого вычисляется синус
terms - количество члепнов ряда Тейлора, ктоторые будут использованы для вычисления (по умолчанию 20)
"""
def calculate_sin(x, terms=20):
    # Храним результат
    sin_x = 0
    # Перебираем все ряды Тейлора по заданую итерацию
    for i in range(terms):
        # Вычисляется числитель, где "(-1) ** i" - меняет знак!!!
        numerator = (-1) ** i * x ** (2 * i + 1)
        # Вычислятеся знаменатель
        denominator = factorial(2 * i + 1)
        # Складываем ряд
        sin_x += numerator / denominator

    return sin_x

"""Вычисление косинуса с рядом Тейлора, по умолчанию считается с точностью в 20 итераций ряда Тейлора
x - угол в радианах, для которого вычисляется синус
terms - количество члепнов ряда Тейлора, ктоторые будут использованы для вычисления (по умолчанию 20)
"""
def calculate_cos(x, terms=20):
    # Храним результат
    cos_x = 0
    # Перебираем все ряды Тейлора по заданую итерацию
    for i in range(terms):
        # Вычисляется числитель, где "(-1) ** i" - меняет знак!!!
        numerator = (-1) ** i * x ** (2 * i)
        # Вычислятеся знаменатель
        denominator = factorial(2 * i)
        # Складываем ряд
        cos_x += numerator / denominator

    return cos_x

"""
    Возвращает модуль (абсолютное значение) числа.

    :param value: Входное число (может быть int или float).
    :return: Модуль числа.
    :raises TypeError: Если входной параметр не является числом.
"""
def calculate_abs(value):
    if not isinstance(value, (int, float)):
        raise TypeError("Аргумент должен быть числом (int или float).")

    return value if value >= 0 else -value
